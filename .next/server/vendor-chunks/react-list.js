/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-list";
exports.ids = ["vendor-chunks/react-list"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-list/react-list.js":
/*!***********************************************!*\
  !*** ./node_modules/react-list/react-list.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"), __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_propTypes, _react) {\n  \"use strict\";\n\n  _propTypes = _interopRequireDefault(_propTypes);\n  _react = _interopRequireWildcard(_react);\n\n  var _class, _temp;\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n  function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  var CLIENT_SIZE_KEYS = {\n    x: 'clientWidth',\n    y: 'clientHeight'\n  };\n  var CLIENT_START_KEYS = {\n    x: 'clientTop',\n    y: 'clientLeft'\n  };\n  var INNER_SIZE_KEYS = {\n    x: 'innerWidth',\n    y: 'innerHeight'\n  };\n  var OFFSET_SIZE_KEYS = {\n    x: 'offsetWidth',\n    y: 'offsetHeight'\n  };\n  var OFFSET_START_KEYS = {\n    x: 'offsetLeft',\n    y: 'offsetTop'\n  };\n  var OVERFLOW_KEYS = {\n    x: 'overflowX',\n    y: 'overflowY'\n  };\n  var SCROLL_SIZE_KEYS = {\n    x: 'scrollWidth',\n    y: 'scrollHeight'\n  };\n  var SCROLL_START_KEYS = {\n    x: 'scrollLeft',\n    y: 'scrollTop'\n  };\n  var SIZE_KEYS = {\n    x: 'width',\n    y: 'height'\n  };\n\n  var NOOP = function NOOP() {}; // If a browser doesn't support the `options` argument to\n  // add/removeEventListener, we need to check, otherwise we will\n  // accidentally set `capture` with a truthy value.\n\n\n  var PASSIVE = function () {\n    if (typeof window === 'undefined') return false;\n    var hasSupport = false;\n\n    try {\n      document.createElement('div').addEventListener('test', NOOP, {\n        get passive() {\n          hasSupport = true;\n          return false;\n        }\n\n      });\n    } catch (e) {// noop\n    }\n\n    return hasSupport;\n  }() ? {\n    passive: true\n  } : false;\n  var UNSTABLE_MESSAGE = 'ReactList failed to reach a stable state.';\n  var MAX_SYNC_UPDATES = 40;\n\n  var isEqualSubset = function isEqualSubset(a, b) {\n    for (var key in b) {\n      if (a[key] !== b[key]) return false;\n    }\n\n    return true;\n  };\n\n  var defaultScrollParentGetter = function defaultScrollParentGetter(component) {\n    var axis = component.props.axis;\n    var el = component.getEl();\n    var overflowKey = OVERFLOW_KEYS[axis];\n\n    while (el = el.parentElement) {\n      switch (window.getComputedStyle(el)[overflowKey]) {\n        case 'auto':\n        case 'scroll':\n        case 'overlay':\n          return el;\n      }\n    }\n\n    return window;\n  };\n\n  var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {\n    var axis = component.props.axis;\n    var scrollParent = component.scrollParent;\n    return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];\n  };\n\n  var constrain = function constrain(props, state) {\n    var length = props.length,\n        minSize = props.minSize,\n        type = props.type;\n    var from = state.from,\n        size = state.size,\n        itemsPerRow = state.itemsPerRow;\n    size = Math.max(size, minSize);\n    var mod = size % itemsPerRow;\n    if (mod) size += itemsPerRow - mod;\n    if (size > length) size = length;\n    from = type === 'simple' || !from ? 0 : Math.max(Math.min(from, length - size), 0);\n\n    if (mod = from % itemsPerRow) {\n      from -= mod;\n      size += mod;\n    }\n\n    if (from === state.from && size == state.size) return state;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      from: from,\n      size: size\n    });\n  };\n\n  module.exports = (_temp = _class = /*#__PURE__*/function (_Component) {\n    _inherits(ReactList, _Component);\n\n    var _super = _createSuper(ReactList);\n\n    _createClass(ReactList, null, [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(props, state) {\n        var newState = constrain(props, state);\n        return newState === state ? null : newState;\n      }\n    }]);\n\n    function ReactList(props) {\n      var _this;\n\n      _classCallCheck(this, ReactList);\n\n      _this = _super.call(this, props);\n      _this.state = constrain(props, {\n        itemsPerRow: 1,\n        from: props.initialIndex,\n        size: 0\n      });\n      _this.cache = {};\n      _this.cachedScrollPosition = null;\n      _this.prevPrevState = {};\n      _this.unstable = false;\n      _this.updateCounter = 0;\n      return _this;\n    }\n\n    _createClass(ReactList, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);\n        window.addEventListener('resize', this.updateFrameAndClearCache);\n        this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var _this2 = this;\n\n        // Viewport scroll is no longer useful if axis changes\n        if (this.props.axis !== prevProps.axis) this.clearSizeCache(); // If the list has reached an unstable state, prevent an infinite loop.\n\n        if (this.unstable) return;\n\n        if (++this.updateCounter > MAX_SYNC_UPDATES) {\n          this.unstable = true;\n          return console.error(UNSTABLE_MESSAGE);\n        }\n\n        if (!this.updateCounterTimeoutId) {\n          this.updateCounterTimeoutId = setTimeout(function () {\n            _this2.updateCounter = 0;\n            delete _this2.updateCounterTimeoutId;\n          }, 0);\n        }\n\n        this.updateFrame();\n      }\n    }, {\n      key: \"maybeSetState\",\n      value: function maybeSetState(b, cb) {\n        if (isEqualSubset(this.state, b)) return cb();\n        this.setState(b, cb);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.updateFrameAndClearCache);\n        this.scrollParent.removeEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);\n        this.scrollParent.removeEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: \"getOffset\",\n      value: function getOffset(el) {\n        var axis = this.props.axis;\n        var offset = el[CLIENT_START_KEYS[axis]] || 0;\n        var offsetKey = OFFSET_START_KEYS[axis];\n\n        do {\n          offset += el[offsetKey] || 0;\n        } while (el = el.offsetParent);\n\n        return offset;\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this.el || this.items;\n      }\n    }, {\n      key: \"getScrollPosition\",\n      value: function getScrollPosition() {\n        // Cache scroll position as this causes a forced synchronous layout.\n        if (typeof this.cachedScrollPosition === 'number') {\n          return this.cachedScrollPosition;\n        }\n\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        var scrollKey = SCROLL_START_KEYS[axis];\n        var actual = scrollParent === window ? // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari\n        // always return document.documentElement[scrollKey] as 0, so take\n        // whichever has a value.\n        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];\n        var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);\n        var scroll = Math.max(0, Math.min(actual, max));\n        var el = this.getEl();\n        this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);\n        return this.cachedScrollPosition;\n      }\n    }, {\n      key: \"setScroll\",\n      value: function setScroll(offset) {\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        offset += this.getOffset(this.getEl());\n        if (scrollParent === window) return window.scrollTo(0, offset);\n        offset -= this.getOffset(this.scrollParent);\n        scrollParent[SCROLL_START_KEYS[axis]] = offset;\n      }\n    }, {\n      key: \"getScrollSize\",\n      value: function getScrollSize() {\n        var scrollParent = this.scrollParent;\n        var _document = document,\n            body = _document.body,\n            documentElement = _document.documentElement;\n        var key = SCROLL_SIZE_KEYS[this.props.axis];\n        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];\n      }\n    }, {\n      key: \"hasDeterminateSize\",\n      value: function hasDeterminateSize() {\n        var _this$props = this.props,\n            itemSizeGetter = _this$props.itemSizeGetter,\n            type = _this$props.type;\n        return type === 'uniform' || itemSizeGetter;\n      }\n    }, {\n      key: \"getStartAndEnd\",\n      value: function getStartAndEnd() {\n        var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;\n        var scroll = this.getScrollPosition();\n        var start = Math.max(0, scroll - threshold);\n        var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;\n\n        if (this.hasDeterminateSize()) {\n          end = Math.min(end, this.getSpaceBefore(this.props.length));\n        }\n\n        return {\n          start: start,\n          end: end\n        };\n      }\n    }, {\n      key: \"getItemSizeAndItemsPerRow\",\n      value: function getItemSizeAndItemsPerRow() {\n        var _this$props2 = this.props,\n            axis = _this$props2.axis,\n            useStaticSize = _this$props2.useStaticSize;\n        var _this$state = this.state,\n            itemSize = _this$state.itemSize,\n            itemsPerRow = _this$state.itemsPerRow;\n\n        if (useStaticSize && itemSize && itemsPerRow) {\n          return {\n            itemSize: itemSize,\n            itemsPerRow: itemsPerRow\n          };\n        }\n\n        var itemEls = this.items.children;\n        if (!itemEls.length) return {};\n        var firstEl = itemEls[0]; // Firefox has a problem where it will return a *slightly* (less than\n        // thousandths of a pixel) different size for the same element between\n        // renders. This can cause an infinite render loop, so only change the\n        // itemSize when it is significantly different.\n\n        var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];\n        var delta = Math.abs(firstElSize - itemSize);\n        if (isNaN(delta) || delta >= 1) itemSize = firstElSize;\n        if (!itemSize) return {};\n        var startKey = OFFSET_START_KEYS[axis];\n        var firstStart = firstEl[startKey];\n        itemsPerRow = 1;\n\n        for (var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]) {\n          ++itemsPerRow;\n        }\n\n        return {\n          itemSize: itemSize,\n          itemsPerRow: itemsPerRow\n        };\n      }\n    }, {\n      key: \"clearSizeCache\",\n      value: function clearSizeCache() {\n        this.cachedScrollPosition = null;\n      } // Called by 'scroll' and 'resize' events, clears scroll position cache.\n\n    }, {\n      key: \"updateFrameAndClearCache\",\n      value: function updateFrameAndClearCache(cb) {\n        this.clearSizeCache();\n        return this.updateFrame(cb);\n      }\n    }, {\n      key: \"updateFrame\",\n      value: function updateFrame(cb) {\n        this.updateScrollParent();\n        if (typeof cb != 'function') cb = NOOP;\n\n        switch (this.props.type) {\n          case 'simple':\n            return this.updateSimpleFrame(cb);\n\n          case 'variable':\n            return this.updateVariableFrame(cb);\n\n          case 'uniform':\n            return this.updateUniformFrame(cb);\n        }\n      }\n    }, {\n      key: \"updateScrollParent\",\n      value: function updateScrollParent() {\n        var prev = this.scrollParent;\n        this.scrollParent = this.props.scrollParentGetter(this);\n        if (prev === this.scrollParent) return;\n\n        if (prev) {\n          prev.removeEventListener('scroll', this.updateFrameAndClearCache);\n          prev.removeEventListener('mousewheel', NOOP);\n        } // If we have a new parent, cached parent dimensions are no longer useful.\n\n\n        this.clearSizeCache();\n        this.scrollParent.addEventListener('scroll', this.updateFrameAndClearCache, PASSIVE); // You have to attach mousewheel listener to the scrollable element.\n        // Just an empty listener. After that onscroll events will be fired synchronously.\n\n        this.scrollParent.addEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: \"updateSimpleFrame\",\n      value: function updateSimpleFrame(cb) {\n        var _this$getStartAndEnd = this.getStartAndEnd(),\n            end = _this$getStartAndEnd.end;\n\n        var itemEls = this.items.children;\n        var elEnd = 0;\n\n        if (itemEls.length) {\n          var axis = this.props.axis;\n          var firstItemEl = itemEls[0];\n          var lastItemEl = itemEls[itemEls.length - 1];\n          elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);\n        }\n\n        if (elEnd > end) return cb();\n        var _this$props3 = this.props,\n            pageSize = _this$props3.pageSize,\n            length = _this$props3.length;\n        var size = Math.min(this.state.size + pageSize, length);\n        this.maybeSetState({\n          size: size\n        }, cb);\n      }\n    }, {\n      key: \"updateVariableFrame\",\n      value: function updateVariableFrame(cb) {\n        if (!this.props.itemSizeGetter) this.cacheSizes();\n\n        var _this$getStartAndEnd2 = this.getStartAndEnd(),\n            start = _this$getStartAndEnd2.start,\n            end = _this$getStartAndEnd2.end;\n\n        var _this$props4 = this.props,\n            length = _this$props4.length,\n            pageSize = _this$props4.pageSize;\n        var space = 0;\n        var from = 0;\n        var size = 0;\n        var maxFrom = length - 1;\n\n        while (from < maxFrom) {\n          var itemSize = this.getSizeOfItem(from);\n          if (itemSize == null || space + itemSize > start) break;\n          space += itemSize;\n          ++from;\n        }\n\n        var maxSize = length - from;\n\n        while (size < maxSize && space < end) {\n          var _itemSize = this.getSizeOfItem(from + size);\n\n          if (_itemSize == null) {\n            size = Math.min(size + pageSize, maxSize);\n            break;\n          }\n\n          space += _itemSize;\n          ++size;\n        }\n\n        this.maybeSetState(constrain(this.props, {\n          from: from,\n          itemsPerRow: 1,\n          size: size\n        }), cb);\n      }\n    }, {\n      key: \"updateUniformFrame\",\n      value: function updateUniformFrame(cb) {\n        var _this$getItemSizeAndI = this.getItemSizeAndItemsPerRow(),\n            itemSize = _this$getItemSizeAndI.itemSize,\n            itemsPerRow = _this$getItemSizeAndI.itemsPerRow;\n\n        if (!itemSize || !itemsPerRow) return cb();\n\n        var _this$getStartAndEnd3 = this.getStartAndEnd(),\n            start = _this$getStartAndEnd3.start,\n            end = _this$getStartAndEnd3.end;\n\n        var _constrain = constrain(this.props, {\n          from: Math.floor(start / itemSize) * itemsPerRow,\n          size: (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow,\n          itemsPerRow: itemsPerRow\n        }),\n            from = _constrain.from,\n            size = _constrain.size;\n\n        return this.maybeSetState({\n          itemsPerRow: itemsPerRow,\n          from: from,\n          itemSize: itemSize,\n          size: size\n        }, cb);\n      }\n    }, {\n      key: \"getSpaceBefore\",\n      value: function getSpaceBefore(index) {\n        var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (cache[index] != null) return cache[index]; // Try the static itemSize.\n\n        var _this$state2 = this.state,\n            itemSize = _this$state2.itemSize,\n            itemsPerRow = _this$state2.itemsPerRow;\n\n        if (itemSize) {\n          return cache[index] = Math.floor(index / itemsPerRow) * itemSize;\n        } // Find the closest space to index there is a cached value for.\n\n\n        var from = index;\n\n        while (from > 0 && cache[--from] == null) {\n          ;\n        } // Finally, accumulate sizes of items from - index.\n\n\n        var space = cache[from] || 0;\n\n        for (var i = from; i < index; ++i) {\n          cache[i] = space;\n\n          var _itemSize2 = this.getSizeOfItem(i);\n\n          if (_itemSize2 == null) break;\n          space += _itemSize2;\n        }\n\n        return cache[index] = space;\n      }\n    }, {\n      key: \"cacheSizes\",\n      value: function cacheSizes() {\n        var cache = this.cache;\n        var from = this.state.from;\n        var itemEls = this.items.children;\n        var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];\n\n        for (var i = 0, l = itemEls.length; i < l; ++i) {\n          cache[from + i] = itemEls[i][sizeKey];\n        }\n      }\n    }, {\n      key: \"getSizeOfItem\",\n      value: function getSizeOfItem(index) {\n        var cache = this.cache,\n            items = this.items;\n        var _this$props5 = this.props,\n            axis = _this$props5.axis,\n            itemSizeGetter = _this$props5.itemSizeGetter,\n            itemSizeEstimator = _this$props5.itemSizeEstimator,\n            type = _this$props5.type;\n        var _this$state3 = this.state,\n            from = _this$state3.from,\n            itemSize = _this$state3.itemSize,\n            size = _this$state3.size; // Try the static itemSize.\n\n        if (itemSize) return itemSize; // Try the itemSizeGetter.\n\n        if (itemSizeGetter) return itemSizeGetter(index); // Try the cache.\n\n        if (index in cache) return cache[index]; // Try the DOM.\n\n        if (type === 'simple' && index >= from && index < from + size && items) {\n          var itemEl = items.children[index - from];\n          if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];\n        } // Try the itemSizeEstimator.\n\n\n        if (itemSizeEstimator) return itemSizeEstimator(index, cache);\n      }\n    }, {\n      key: \"scrollTo\",\n      value: function scrollTo(index) {\n        if (index != null) this.setScroll(this.getSpaceBefore(index));\n      }\n    }, {\n      key: \"scrollAround\",\n      value: function scrollAround(index) {\n        var current = this.getScrollPosition();\n        var bottom = this.getSpaceBefore(index);\n        var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);\n        var min = Math.min(top, bottom);\n        var max = Math.max(top, bottom);\n        if (current <= min) return this.setScroll(min);\n        if (current > max) return this.setScroll(max);\n      }\n    }, {\n      key: \"getVisibleRange\",\n      value: function getVisibleRange() {\n        var _this$state4 = this.state,\n            from = _this$state4.from,\n            size = _this$state4.size;\n\n        var _this$getStartAndEnd4 = this.getStartAndEnd(0),\n            start = _this$getStartAndEnd4.start,\n            end = _this$getStartAndEnd4.end;\n\n        var cache = {};\n        var first, last;\n\n        for (var i = from; i < from + size; ++i) {\n          var itemStart = this.getSpaceBefore(i, cache);\n          var itemEnd = itemStart + this.getSizeOfItem(i);\n          if (first == null && itemEnd > start) first = i;\n          if (first != null && itemStart < end) last = i;\n        }\n\n        return [first, last];\n      }\n    }, {\n      key: \"renderItems\",\n      value: function renderItems() {\n        var _this3 = this;\n\n        var _this$props6 = this.props,\n            itemRenderer = _this$props6.itemRenderer,\n            itemsRenderer = _this$props6.itemsRenderer;\n        var _this$state5 = this.state,\n            from = _this$state5.from,\n            size = _this$state5.size;\n        var items = [];\n\n        for (var i = 0; i < size; ++i) {\n          items.push(itemRenderer(from + i, i));\n        }\n\n        return itemsRenderer(items, function (c) {\n          return _this3.items = c;\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this4 = this;\n\n        var _this$props7 = this.props,\n            axis = _this$props7.axis,\n            length = _this$props7.length,\n            type = _this$props7.type,\n            useTranslate3d = _this$props7.useTranslate3d;\n        var _this$state6 = this.state,\n            from = _this$state6.from,\n            itemsPerRow = _this$state6.itemsPerRow;\n        var items = this.renderItems();\n        if (type === 'simple') return items;\n        var style = {\n          position: 'relative'\n        };\n        var cache = {};\n        var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;\n        var size = this.getSpaceBefore(bottom, cache);\n\n        if (size) {\n          style[SIZE_KEYS[axis]] = size;\n          if (axis === 'x') style.overflowX = 'hidden';\n        }\n\n        var offset = this.getSpaceBefore(from, cache);\n        var x = axis === 'x' ? offset : 0;\n        var y = axis === 'y' ? offset : 0;\n        var transform = useTranslate3d ? \"translate3d(\".concat(x, \"px, \").concat(y, \"px, 0)\") : \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n        var listStyle = {\n          msTransform: transform,\n          WebkitTransform: transform,\n          transform: transform\n        };\n        return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          style: style,\n          ref: function ref(c) {\n            return _this4.el = c;\n          }\n        }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          style: listStyle\n        }, items));\n      }\n    }]);\n\n    return ReactList;\n  }(_react.Component), _defineProperty(_class, \"displayName\", 'ReactList'), _defineProperty(_class, \"propTypes\", {\n    axis: _propTypes[\"default\"].oneOf(['x', 'y']),\n    initialIndex: _propTypes[\"default\"].number,\n    itemRenderer: _propTypes[\"default\"].func,\n    itemSizeEstimator: _propTypes[\"default\"].func,\n    itemSizeGetter: _propTypes[\"default\"].func,\n    itemsRenderer: _propTypes[\"default\"].func,\n    length: _propTypes[\"default\"].number,\n    minSize: _propTypes[\"default\"].number,\n    pageSize: _propTypes[\"default\"].number,\n    scrollParentGetter: _propTypes[\"default\"].func,\n    scrollParentViewportSizeGetter: _propTypes[\"default\"].func,\n    threshold: _propTypes[\"default\"].number,\n    type: _propTypes[\"default\"].oneOf(['simple', 'variable', 'uniform']),\n    useStaticSize: _propTypes[\"default\"].bool,\n    useTranslate3d: _propTypes[\"default\"].bool\n  }), _defineProperty(_class, \"defaultProps\", {\n    axis: 'y',\n    itemRenderer: function itemRenderer(index, key) {\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        key: key\n      }, index);\n    },\n    itemsRenderer: function itemsRenderer(items, ref) {\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        ref: ref\n      }, items);\n    },\n    length: 0,\n    minSize: 1,\n    pageSize: 10,\n    scrollParentGetter: defaultScrollParentGetter,\n    scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,\n    threshold: 100,\n    type: 'simple',\n    useStaticSize: false,\n    useTranslate3d: false\n  }), _temp);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-list/react-list.js\n");

/***/ })

};
;